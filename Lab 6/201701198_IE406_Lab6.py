# -*- coding: utf-8 -*-
"""201701198_IE406_Lab6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18I5ipj5KLV_81teRbx0n4Id3Emgh4O8G

**Author : Dharmin Solanki (ID: 201701198)**

Importing Libraries
"""

import numpy as np
import h5py
import matplotlib.pyplot as plt

"""**-------------------------------------------------------------------------------------------**

Mounting the Google Drive.
"""

from google.colab import drive
drive.mount('/content/drive/')

"""**-------------------------------------------------------------------------------------------**

Loading the image-data Matrix.
"""

images = h5py.File('/content/drive/My Drive/IE406- ML- Labs/Lab 6/faceimages.mat', 'r')

"""**####################################################################**

**Question 2 -** Mean subtracting the data and using it to obtain Sample Covariance Matrix .

> Importing image-data into an array.
"""

imgData0 = np.array(images['data'][:])  
# "data" is a column in the faceimages.mat file.

"""> Reshaping the image and showing an example."""

imgData = np.delete(imgData0, (112*92), 0)

temp=imgData.reshape((92,112,400))
temp2=temp[:,:,100]
img=temp2.T

plt.imshow(img)
plt.show()

"""> Subtracting mean values."""

mean = np.mean(imgData, axis=1, keepdims=True)
imgData2 = imgData - mean

"""> Obtaing Sample Covariance Matrix."""

covMatrix = np.cov(imgData2)

print('Dimensions of Covariance Matrix =', covMatrix.shape[0],'x', covMatrix.shape[0])

"""**####################################################################**

**Question 3 -** Eigenvalues and Eigenvectors of the Covariance Matrix.

> Calculating Eigenvectors and Eigenvalues and showing dimensions (i.e. shape).
"""

eigenValues, eigenVectors = np.linalg.eigh(covMatrix)

print('Dimensions of the Eigenvectors =', eigenVectors.shape[0],'x', eigenVectors.shape[0])
print('Dimensions of the Eigenvalues  =', eigenValues.shape[0],'x', eigenValues.shape[0])

"""**####################################################################**

**Question 4 -** Using the Eigenvectors as rows of the Transformation Matrix A.

> Generating the Transformation Matrix A.
"""

index = eigenValues.argsort()[::-1]

eigenValues = eigenValues[index]
eigenVectors = eigenVectors[:, index]

A = eigenVectors

"""**####################################################################**

**Question 5 -** Obtaining 10304 * 10304 low dimensional representation of X.
"""

X = imgData - mean

print('Dimensions of X =', X.shape[0],'x', X.shape[0])

"""**####################################################################**

**Question 6 -** Reconstructing back any of the image by taking 50, 100, and 400 features of  Y; where Y = A•X.

> Calculating Y = A•X
"""

Y = np.dot(A.T, X)

print('Dimensions of Y =', Y.shape[0],'x', Y.shape[0])

"""**-------------------------------------------------------------------------------------------**

> Reconstructing images by taking 50 features of Y.

>> Calculating X = A⁻¹•Y = A•Y using 50 features.
"""

reconst_50 = np.dot(A[:,:50], Y[:50,100])

""">> Compressing in dimension 112 x 92."""

compress_50 = reconst_50.reshape((92,112))

""">> Plotting reconstructed image."""

img_50 = compress_50.T

plt.imshow(img_50)
plt.show()

"""**-------------------------------------------------------------------------------------------**

> Reconstructing images by taking 100 features of Y.

>> Calculating X = A⁻¹•Y = A•Y using 100 features.
"""

reconst_100 = np.dot(A[:,:100], Y[:100,100])

""">> Compressing in dimension 112 x 92."""

compress_100 = reconst_100.reshape((92,112))

""">> Plotting reconstructed image."""

img_100 = compress_100.T

plt.imshow(img_100)
plt.show()

"""**-------------------------------------------------------------------------------------------**

> Reconstructing images by taking 400 features of Y.

>> Calculating X = A⁻¹•Y = A•Y using 400 features.
"""

reconst_400 = np.dot(A[:,:400], Y[:400,100])

""">> Compressing in dimension 112 x 92."""

compress_400 = reconst_400.reshape((92,112))

""">> Plotting reconstructed image."""

img_400 = compress_400.T

plt.imshow(img_400)
plt.show()

"""**####################################################################**

**Question 7 -** Calculating reconstruction error(l1 norm) for all the three cases.

> Case-1 : 50 features.
"""

temp3 = abs(reconst_50 - X[:, 100])**2
temp4 = np.sum(temp3)
temp5 = temp4/len(reconst_50)
error_50 = np.sqrt(temp5)

print('Reconstruction Error =', error_50)

"""**-------------------------------------------------------------------------------------------**

> Case-2 : 100 features.
"""

temp6 = abs(reconst_100 - X[:, 100])**2
temp7 = np.sum(temp6)
temp8 = temp7/len(reconst_100)
error_100 = np.sqrt(temp8)

print('Reconstruction Error =', error_100)

"""**-------------------------------------------------------------------------------------------**

> Case-3 : 400 features.
"""

temp9 = abs(reconst_400 - X[:, 100])**2
temp10 = np.sum(temp9)
temp11 = temp10/len(reconst_400)
error_400 = np.sqrt(temp11)

print('Reconstruction Error =', error_400)

"""**-------------------------- END OF CODE --------------------------**"""